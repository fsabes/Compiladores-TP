package lyc.compiler;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;

import lyc.compiler.simbolsTable.SimbolTable;
import lyc.compiler.simbolsTable.SimbolRow;
import lyc.compiler.simbolsTable.DataType;

class Parser;
action code
{:
    public SimbolTable simbolTable = SimbolTable.getSingletonInstance();
    public ArrayList<String> identifiersList = new ArrayList();
    public ArrayList<String> listAux = new ArrayList<String>();
    public ArrayList<String> listStrings = new ArrayList();
    public ArrayList<String> listInt = new ArrayList();
    public ArrayList<String> listFloat = new ArrayList();
    public boolean isInt = false;
    public boolean isFloat = false;
    public boolean isString  = false;
:}

parser code
{:
    public List<SimbolRow> getListaSimbolos() {
        return action_obj.simbolTable.getListaSimbolos();
    }

:}

// Terminals
terminal WHILE;
terminal IF;
terminal ELSE;
terminal INIT;
terminal INT;
terminal FLOAT;
terminal STRING;
terminal NOT;
terminal AND;
terminal OR;
terminal WRITE;
terminal READ;
terminal OP_GREATER;
terminal OP_LESSER;
terminal OP_GREATER_EQUAL;
terminal OP_LESSER_EQUAL;
terminal OP_EQUAL;
terminal OP_NOT_EQUAL;
terminal OP_ASSIG;
terminal PLUS;
terminal SUB;
terminal MULT;
terminal DIV;
terminal SPACE;
//terminal OPEN_COMMENT;
//terminal CLOSE_COMMENT;
terminal COMMA;
terminal DOT;
terminal COLON;
terminal OPEN_KEY_BRACKET;
terminal CLOSE_KEY_BRACKET;
terminal OPEN_BRACKET;
terminal CLOSE_BRACKET;
terminal OPEN_SQUARE_BRACKET;
terminal CLOSE_SQUARE_BRACKET;
terminal TRIANGLE;
terminal BINARY_COUNT;
terminal IDENTIFIER;
terminal CONST_FLOAT;
terminal CONST_INT;
terminal CONST_STRING;
terminal COMMENT;
terminal BINARY;

// Non Terminals
non terminal sentence;
non terminal assignment;
non terminal expression;
non terminal declaration;
non terminal variable;
non terminal multipleVariable;
non terminal variableList;
non terminal declarationList;
non terminal clase;
non terminal term;
non terminal factor;
non terminal multiple_sentence;
non terminal expressionConditional;
non terminal conditional;
non terminal multipleCondition;
non terminal condition;
non terminal comparison;
non terminal block;
non terminal expressionIterator;
non terminal expressionRead;
non terminal content;
non terminal inputWrite;
non terminal expressionWrite;
non terminal comment;
non terminal expressionInit;
non terminal multipleSentence;
non terminal sentenceInit;
non terminal expressionTriangle;
non terminal expressionBinaryCount;
non terminal elementList;
non terminal element;
non terminal inputRead;

// Start Symbol Definition
start with sentenceInit;

/** FALTA ARREGLAR LOS PRINT **/

sentenceInit ::= multipleSentence {:System.out.println("End"); :};
sentenceInit ::= /* Empty */ {: System.out.println("End"); :};
multipleSentence ::= sentence multipleSentence {: System.out.println("End"); :};
multipleSentence ::= sentence {: System.out.println("End"); :};
sentence ::= expressionInit {: System.out.println("End"); :};
sentence ::= assignment {: System.out.println("End"); :};
sentence ::= expressionConditional {: System.out.println("expressionConditional"); :};
sentence ::= expressionIterator {: System.out.println("expressionIterator"); :};
sentence ::= expressionTriangle {: System.out.println("comment"); :};
sentence ::= expressionBinaryCount {: System.out.println("comment"); :};
sentence ::= expressionRead {: System.out.println("comment"); :};
sentence ::= expressionWrite {: System.out.println("comment"); :};

//IF
expressionConditional ::= IF OPEN_BRACKET conditional CLOSE_BRACKET block {: System.out.println("expressionConditional"); :};
expressionConditional ::= IF OPEN_BRACKET conditional CLOSE_BRACKET block ELSE block {: System.out.println("expressionConditional"); :};
conditional ::= condition multipleCondition  {: System.out.println("expressionConditional = condition multipleCondition"); :};
conditional ::= condition  {: System.out.println("condition"); :};
conditional ::= NOT conditional  {: System.out.println("expressionConditional = condition multipleCondition"); :};
multipleCondition ::= AND conditional  {: System.out.println("multipleCondition = AND expressionConditional"); :};
multipleCondition ::= OR conditional  {: System.out.println("multipleCondition OR expressionConditional"); :};
condition ::= expression comparison expression {: System.out.println("condition ::= expression comparison expression"); :};
comparison ::=  OP_EQUAL | OP_NOT_EQUAL | OP_GREATER | OP_LESSER | OP_LESSER_EQUAL | OP_GREATER_EQUAL {: System.out.println("comparison"); :};

//INIT
expressionInit ::= INIT {: System.out.println("Comienza INIT"); :} OPEN_KEY_BRACKET declarationList CLOSE_KEY_BRACKET {: System.out.println("Termina INIT"); :};
declarationList ::= declaration declarationList {: /*System.out.println("Assignment = declaration");*/ :};
declarationList ::= declaration {: /* System.out.println("Assignment = declaration");*/ :};
declaration ::= variableList COLON clase {:
    ListIterator<String> iterador = listAux.listIterator();
    if(isString){
        this.listStrings.addAll(listAux);
        System.out.println("Lista de identificadores: " + listAux.toString() + " Tipo de dato: STRING");
        simbolTable.addIdentifiers(listAux, DataType.STRING);
    }        
    if (isFloat){
        System.out.println("Lista de identificadores: " + listAux.toString() + " Tipo de dato: FLOAT");
        simbolTable.addIdentifiers(listAux, DataType.FLOAT);
    }
    if (isInt){
        System.out.println("Lista de identificadores: " + listAux.toString() + " Tipo de dato: INT");
        simbolTable.addIdentifiers(listAux, DataType.INT);
    }
    /*System.out.println("Assignment = declaration");*/
    isString = false;
    isInt = false;
    isFloat = false; 
    listAux.clear();
:};
variableList ::= variable COMMA variableList {: /*System.out.println("Assignment = declaration");*/ :};
variableList ::= variable {: /*System.out.println("Assignment = declaration");*/ :};
variable ::= IDENTIFIER:id  {:
    if (this.identifiersList.contains(id) ){
        System.out.println("ERROR: QUIERE UTILIZAR UNA VARIABLE QUE YA FUE DECLARADA " + id);
        System.exit(-1);
    }
    this.identifiersList.add(id.toString());
    listAux.add(id.toString());
    /*System.out.println("Assignment = declaration Identifier: " + id);*/ 
:};
clase ::= STRING {: isString = true; /*System.out.println("Class: STRING");*/ :};
clase ::= FLOAT {: isFloat = true; /*System.out.println("Class: FLOAT");*/ :};
clase ::= INT {: isInt = true; /*System.out.println("Class: INT");*/ :};

//TRIANGLE
expressionTriangle ::= TRIANGLE OPEN_BRACKET expression COMMA expression COMMA expression CLOSE_BRACKET {: System.out.println("Class"); :};
assignment ::= IDENTIFIER OP_ASSIG expressionTriangle {: System.out.println("Assignment"); :};

//BINARY COUNT
expressionBinaryCount ::= BINARY_COUNT OPEN_BRACKET OPEN_SQUARE_BRACKET elementList CLOSE_SQUARE_BRACKET CLOSE_BRACKET {: System.out.println("Assignment"); :};
elementList ::= elementList COMMA element {: System.out.println("Assignment"); :};
elementList ::= element {: System.out.println("Assignment"); :};
element ::= CONST_INT:constant {: 
    this.simbolTable.add("_"+constant,DataType.INT,constant.toString(), null);
    System.out.println("Assignment"); 
:};
element ::= IDENTIFIER:id {: System.out.println("Assignment"); :};
assignment ::= IDENTIFIER OP_ASSIG expressionBinaryCount {: System.out.println("Assignment"); :};

// WHILE
expressionIterator ::= WHILE OPEN_BRACKET conditional CLOSE_BRACKET block {: System.out.println("expressionIterator"); :};
block ::= OPEN_KEY_BRACKET sentenceInit CLOSE_KEY_BRACKET {: System.out.println("block"); :};

//READ
expressionRead ::= READ OPEN_BRACKET inputRead CLOSE_BRACKET {: System.out.println("expressionRead"); :};
inputRead ::= IDENTIFIER:id  {: 
    if (! this.identifiersList.contains(id) ){
        System.out.println("ERROR: QUIERE UTILIZAR UNA VARIABLE QUE NO FUE DECLARADA " + id);
        System.exit(-1);
    }
    System.out.println("Input expressionRead id: " +  id); 
:};

//WRITE
expressionWrite ::= WRITE OPEN_BRACKET inputWrite CLOSE_BRACKET {: System.out.println("write"); :};
inputWrite ::= IDENTIFIER:id  {: 
    if (! this.identifiersList.contains(id) ){
        System.out.println("ERROR: QUIERE UTILIZAR UNA VARIABLE QUE NO FUE DECLARADA " + id);
        System.exit(-1);
    }
    System.out.println("Input write id: " +  id); 
:};
inputWrite ::= CONST_STRING:constant {: 
    this.simbolTable.add("_"+constant,DataType.STRING,constant.toString(), null);
    System.out.println("Input write string:" + constant); 
:};

//ASSIGNMENT
assignment ::= IDENTIFIER:id OP_ASSIG expression {: System.out.println("Assignment" + id); :};
expression ::= expression PLUS term {: System.out.println("+"); :};
expression ::= expression SUB term {: System.out.println("-"); :};
expression ::= term {: System.out.println("Expression = Term"); :};
term ::= term MULT factor {: System.out.println("*"); :};
term ::= term DIV factor {: System.out.println("/"); :};
term ::= factor {: System.out.println("Term = factor"); :};
factor ::= IDENTIFIER:id  {: 
    if (! this.identifiersList.contains(id) ){
        System.out.println("ERROR: QUIERE UTILIZAR UNA VARIABLE QUE NO FUE DECLARADA " + id);
        System.exit(-1);
    }
    if(this.listStrings.contains(id)){
        System.out.println("ERROR: TIPO DE DATO INVALIDO " + id);
        System.exit(-1);
    }
    System.out.println("Id: " + id); 
:};
factor ::= CONST_INT:constant {:
    this.simbolTable.add("_"+constant,DataType.INT,constant.toString(), null);
    System.out.println("Constant Int: " + constant ); 
:};
factor ::= CONST_STRING:constant {: 
    this.simbolTable.add("_"+constant,DataType.STRING,constant.toString(), null);
    System.out.println("Constant String: " + constant ); 
:};
factor ::= CONST_FLOAT:constant {: 
    this.simbolTable.add("_"+constant,DataType.FLOAT,constant.toString(), null);
    System.out.println("Constant Float: " + constant ); 
:};
factor ::= OPEN_BRACKET expression CLOSE_BRACKET {: System.out.println("Factor = (Expression)"); :};